[{"C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\index.js":"1","C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\App.js":"2","C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\components\\Home.js":"3","C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\components\\Choose.js":"4","C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\components\\Startgame.js":"5"},{"size":822,"mtime":1718560050975,"results":"6","hashOfConfig":"7"},{"size":429,"mtime":1720368619319,"results":"8","hashOfConfig":"7"},{"size":3600,"mtime":1720379163882,"results":"9","hashOfConfig":"7"},{"size":5899,"mtime":1720114344549,"results":"10","hashOfConfig":"7"},{"size":5170,"mtime":1720114344566,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1kvp04y",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"15"},"C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\index.js",[],[],[],"C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\App.js",[],[],"C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\components\\Home.js",["30"],[],"C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\components\\Choose.js",["31"],[],"import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport thear from '../images_start/earth-02-01.png';\r\nimport child1 from '../images_start/chilld1-01.png';\r\nimport child2 from '../images_start/child2-01.png';\r\nimport child3 from '../images_start/child3-01.png';\r\nimport pencil from '../images_start/pencil-01.png';\r\nimport carpentry from '../images_start/carpentry-01.png';\r\nimport {GameDataContext} from '../App';\r\n\r\nfunction Choose() {\r\n    const { gameData, setGameData } = React.useContext(GameDataContext);\r\n    const [number,setNumber]=React.useState();\r\n    const [operation,setOperation]=React.useState();\r\n    const [show,setShow]=React.useState('none');\r\n    const [message,seMessage]=React.useState();\r\n\r\n    function send_data(e){\r\n        if(!number && !operation){\r\n          e.preventDefault();\r\n          setShow('block');\r\n          seMessage(\"Please enter a number and choose an operation.\");\r\n        }else if (!number) {\r\n          e.preventDefault();\r\n          setShow('block');\r\n          seMessage(\"Please enter a number\");  \r\n        }else if(!operation){\r\n          e.preventDefault();\r\n          setShow('block');\r\n          seMessage(\"Please choose an operation\");\r\n        }else{\r\n           setGameData({ number: number, operation: operation });\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n    \r\n          <div className=\"card mt-1\">\r\n            <div className=\"d-flex justify-content-between align-items-center p-2\">\r\n              <h4 className=\"text-green\">Game settings</h4>\r\n              <Link to=\"/\">Home page</Link>\r\n            </div>\r\n          </div>\r\n\r\n          <div  className=\"modal\" style={{display:show}}>\r\n          <div className=\"modal-overlay\">\r\n            <div className=\"modal-container\">\r\n             <div className=\"modal-header\">\r\n                <div className='modal-message'>\r\n                 {message}\r\n                </div>\r\n              <div onClick={(e)=>setShow(\"none\")}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-x-square modal-button\" viewBox=\"0 0 16 16\">\r\n                  <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z\"/>\r\n                  <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708\"/>\r\n                 </svg>\r\n              </div>\r\n                   \r\n             </div>\r\n            \r\n            </div>\r\n          </div>\r\n          </div>\r\n          \r\n          <div className=\"col-12 d-flex mt-2\">\r\n            <div className=\"col-6 d-flex flex-column\">\r\n            <div className=\"d-flex justify-content-between align-items-center bg-white col-11 p-1 shadow\">\r\n                 <span className=\"mt-2\" style={{fontSize:\"20px\"}}>Enter the value maximum :</span> \r\n                 <input  type=\"number\" min={0} onChange={(e)=>setNumber(e.target.value)} className=\"field mt-2\" /> \r\n            </div>\r\n    \r\n            <div className=\"col-11 bg-white p-2\">\r\n              <b className='text-success'>Choose the operation you want :</b>\r\n              <div className=\"d-flex justify-content-between col-11 bg-white p-2\">\r\n                <button className=\"col-2 btn btn-success my-2\" onClick={()=>setOperation('x')}>x</button>\r\n                <button className=\"col-2 btn btn-success my-2\" onClick={()=>setOperation('+')}>+</button>\r\n                <button className=\"col-2 btn btn-success my-2\" onClick={()=>setOperation('/')}>/</button>\r\n                <button className=\"col-2 btn btn-success my-2\" onClick={()=>setOperation('-')}>-</button>\r\n                <button className=\"col-2 btn btn-success my-2\" onClick={()=>setOperation('all')}>all</button>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Link to='/start_game' onClick={send_data} className=\"btn-start_v2 button-74_v2\">start now</Link>\r\n            </div>\r\n\r\n          </div>\r\n    \r\n          <div className=\"card shadow col-6 p-2 \">\r\n                  <b className='text-success'>Before you dive into the game, there are a few settings you need to configure:</b>\r\n                  <ul>\r\n                    <li>\r\n                        Enter the maximum number you want to use in the arithmetic problems,\r\n                        This allows you to control the difficulty level of the game.\r\n                    </li>\r\n                    <li>\r\n                        and Choose the type of arithmetic operation you want to practice. \r\n                        You can select addition, subtraction, multiplication, division,or a combination of all four.\r\n                        Simply click on the corresponding button to make your selection.\r\n                    </li>\r\n                    <li>\r\n                         Once you've made these selections, press the 'start now' button to begin the game. \r\n                         Remember, the goal is to solve each problem as quickly as possible. \r\n                         The clock is ticking, so think fast!\r\n                    </li>                   \r\n                  </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='edit_childs'>\r\n            <img src={child1} alt='child1' className='child1'></img>\r\n            <img src={child2} alt='child2' className='child2'></img>\r\n            <img src={child3} alt='child3' className='child3'></img>\r\n            <img src={pencil} alt='pencil' className='pencil'></img>\r\n            <img src={carpentry} alt='carpentry' className='carpentry'></img>\r\n            <img src={thear} style={{width:'100%'}} alt='eath'></img>\r\n          </div>\r\n        \r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Choose;","C:\\Users\\Elghandouri\\Documents\\project_code\\calcultor_game\\src\\components\\Startgame.js",["32","33","34"],[],"import React, { useEffect, useState } from 'react'\r\nimport {GameDataContext} from '../App';\r\nimport heartImage from '../heart-svgrepo-com.svg';\r\nimport imgearth from '../images/earthstargame-01.png';\r\nimport imgIndx from '../images/childeIndex-01.png';\r\nimport { Link } from 'react-router-dom';\r\nfunction Startgame() {\r\n  const { gameData } = React.useContext(GameDataContext);\r\n  const [time,setTime]=useState(60);\r\n  const [number1, setNumber1] = useState(Math.floor(Math.random()*gameData.number));\r\n  const [number2, setNumber2] = useState(Math.floor(Math.random()*gameData.number));\r\n  const [operation, setOperation] = useState(gameData.operation);\r\n  const [response,setResponse]=useState(0);\r\n  const [score,setScore]=useState(0);\r\n  const [rslt,setRslt]=useState(0);\r\n\r\n  const generateImages = (num) => {\r\n    const images = [];\r\n    for (let i = 0; i < num; i++) {\r\n      images.push(<img key={i} src={heartImage}  alt='hear'  width=\"30px\" />);\r\n    }\r\n    return images;\r\n  };\r\n\r\n  //--- timer\r\n  useEffect(() => {\r\n    if(time > 0) {\r\n        const timer = setTimeout(() => {\r\n            setTime(time - 1);\r\n        }, 1000);\r\n        return () => clearTimeout(timer);\r\n    }\r\n}, [time]);\r\n\r\nconst minutes = Math.floor(time / 60);\r\nconst seconds = time % 60;\r\n\r\n//-------start game\r\nconst generateNumbers = () => {\r\n  setNumber1(Math.floor(Math.random()*gameData.number));\r\n  setNumber2(Math.floor(Math.random()*gameData.number));\r\n  \r\n  if(gameData.operation === 'all') {\r\n    const operations = ['+', '-', '*', '/'];\r\n    setOperation(operations[Math.floor(Math.random() * operations.length)]);\r\n  }\r\n}\r\n\r\n\r\nuseEffect(() => {\r\n  if (gameData.operation === 'all') {\r\n    generateNumbers();\r\n  }\r\n}, [gameData.operation]);\r\n\r\nconst startGame = () => {\r\n  let result;\r\n  switch(operation) {\r\n    case '+':\r\n      result = number1 + number2;\r\n      break;\r\n    case '-':\r\n      if(number1>number2)\r\n          result = number1 - number2;\r\n      else\r\n          result = number2 - number1;\r\n      break;\r\n    case '*':\r\n      result = number1 * number2;\r\n      break;\r\n    case '/':\r\n      result = 0;\r\n      break;\r\n    default:\r\n      result = null;\r\n  }\r\n\r\n  if(result === Number(response)) {\r\n    setScore(score+1);\r\n    generateNumbers();\r\n  }\r\n}\r\n\r\n  return (\r\n    <div className='containter'>\r\n          <div className=\"card mt-1\">\r\n            <div className=\"d-flex justify-content-between align-items-center p-2\">\r\n              <h4 className=\"text-green\">Start game</h4>\r\n              <Link to=\"/choose\">Previous page</Link>\r\n            </div>\r\n          </div>\r\n          <div className='d-flex  justify-content-between '>\r\n\r\n          <div className='card shadow col-3 mt-3 part_right p-1'>\r\n            <div className='d-flex justify-content-around align-items-center mt-1'>\r\n               <div>\r\n               <b className='fs-5'>{`0${minutes}:${seconds}`}</b>\r\n            </div>\r\n            <div className='hears'>\r\n            {generateImages(3).map((heart, index) => (\r\n          <React.Fragment key={index}>\r\n            {heart}\r\n          </React.Fragment>\r\n            ))}\r\n            </div>\r\n            </div>\r\n            <ul className='mt-1'>\r\n            <li>Attention to the time (1min) </li>\r\n            <li>You have 3 attempts</li>\r\n            </ul>\r\n            <div className='mt-2 card d-flex p-3'>\r\n              <span className='d-flex justify-content-around'>\r\n                <span className='text-success'>Your score :</span>\r\n                <b className='fs-5 nbr_score px-3 rounded text-light'>{score}</b>\r\n              </span> \r\n            </div>\r\n          </div>\r\n\r\n          <div className='mt-5 display_number' >\r\n            <input type='text' value={\r\n              (operation === '-' && Number(number1) > Number(number2)) ?\r\n              (number1 + operation + number2) :\r\n              (number2 + operation + number1)\r\n              } readOnly className='input_display_number'></input>\r\n          </div>\r\n\r\n          \r\n          <div className='card shadow col-3 mt-3 p-3'>\r\n            <p> <span>The maximum number is : </span><b className='text-danger'>{gameData.number}</b></p>\r\n            <p> <span>The operation chosen is : </span><b className='text-danger'>{gameData.operation}</b></p>\r\n          </div>\r\n\r\n          </div>\r\n\r\n          <div className='bg_start'>\r\n\r\n            <div className='answer card col-3 p-3 shadow'>\r\n              <h5 className='text-success'>Enter the correct answer</h5>\r\n              <div className='d-flex  flex-column justify-content-center align-items-center mt-2'>\r\n              <input type='number' onChange={(e)=>setResponse(e.target.value)} className='form-control form-answer'/>\r\n              <button className='btn btn-success col-8 mt-3' onClick={startGame}>valid</button>\r\n              </div>\r\n            </div>\r\n            \r\n           <div className='child_indx'>\r\n              <img width='350' src={imgIndx} alt='eath'></img>\r\n          </div>\r\n\r\n          <div className='bg_eath'>\r\n            <img width='100%' src={imgearth} alt='eath'></img>\r\n          </div>\r\n          </div>\r\n\r\n         \r\n    </div>\r\n  )\r\n}\r\nexport default Startgame",{"ruleId":"35","severity":1,"message":"36","line":60,"column":21,"nodeType":"37","endLine":60,"endColumn":65},{"ruleId":"38","severity":1,"message":"39","line":12,"column":13,"nodeType":"40","messageId":"41","endLine":12,"endColumn":21},{"ruleId":"38","severity":1,"message":"42","line":15,"column":10,"nodeType":"40","messageId":"41","endLine":15,"endColumn":14},{"ruleId":"38","severity":1,"message":"43","line":15,"column":15,"nodeType":"40","messageId":"41","endLine":15,"endColumn":22},{"ruleId":"44","severity":1,"message":"45","line":54,"column":4,"nodeType":"46","endLine":54,"endColumn":24,"suggestions":"47"},"jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","no-unused-vars","'gameData' is assigned a value but never used.","Identifier","unusedVar","'rslt' is assigned a value but never used.","'setRslt' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateNumbers'. Either include it or remove the dependency array.","ArrayExpression",["48"],{"desc":"49","fix":"50"},"Update the dependencies array to be: [gameData.operation, generateNumbers]",{"range":"51","text":"52"},[1714,1734],"[gameData.operation, generateNumbers]"]