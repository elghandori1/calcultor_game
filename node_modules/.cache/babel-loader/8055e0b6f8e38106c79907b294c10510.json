{"ast":null,"code":"const elms = [{\n  id: 1,\n  elm: \"message1\"\n}];\nexport const InicialAction = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    val: elms\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'AJOUTER':\n      return { ...state,\n        val: [...state.val, action.payload]\n      };\n\n    case \"SUPREMIER\":\n      return { ...state\n      };\n      return { ...state,\n        py: [...state.py.filter(f => f.code !== parseInt(action.payload))]\n      };\n\n    default:\n      return state;\n  }\n};\n_c = InicialAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"InicialAction\");","map":{"version":3,"names":["elms","id","elm","InicialAction","state","val","action","type","payload","py","filter","f","code","parseInt"],"sources":["D:/etuds ofppt/2_anne/Devlop_frontend/fahmReact/pratiqueFhm/src/components/Redux/Reducers.js"],"sourcesContent":["const elms=[{id:1,elm:\"message1\"}];\r\nexport const InicialAction=(state={val:elms},action)=>{\r\n    switch(action.type){\r\n             case 'AJOUTER':\r\n                 return {...state,val:[...state.val,action.payload]};\r\n            case\"SUPREMIER\":\r\n                 return{...state}\r\n                 return {...state,py:[...state.py.filter((f)=>f.code!==parseInt(action.payload))]};\r\n    default :\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAC,CAAC;EAACC,EAAE,EAAC,CAAJ;EAAMC,GAAG,EAAC;AAAV,CAAD,CAAX;AACA,OAAO,MAAMC,aAAa,GAAC,YAA2B;EAAA,IAA1BC,KAA0B,uEAApB;IAACC,GAAG,EAACL;EAAL,CAAoB;EAAA,IAATM,MAAS;;EAClD,QAAOA,MAAM,CAACC,IAAd;IACS,KAAK,SAAL;MACI,OAAO,EAAC,GAAGH,KAAJ;QAAUC,GAAG,EAAC,CAAC,GAAGD,KAAK,CAACC,GAAV,EAAcC,MAAM,CAACE,OAArB;MAAd,CAAP;;IACL,KAAI,WAAJ;MACK,OAAM,EAAC,GAAGJ;MAAJ,CAAN;MACA,OAAO,EAAC,GAAGA,KAAJ;QAAUK,EAAE,EAAC,CAAC,GAAGL,KAAK,CAACK,EAAN,CAASC,MAAT,CAAiBC,CAAD,IAAKA,CAAC,CAACC,IAAF,KAASC,QAAQ,CAACP,MAAM,CAACE,OAAR,CAAtC,CAAJ;MAAb,CAAP;;IACb;MACQ,OAAOJ,KAAP;EAPR;AASH,CAVM;KAAMD,a"},"metadata":{},"sourceType":"module"}