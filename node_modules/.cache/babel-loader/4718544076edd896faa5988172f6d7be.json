{"ast":null,"code":"var _jsxFileName = \"D:\\\\etuds ofppt\\\\2_anne\\\\Devlop_frontend\\\\fahmReact\\\\pratiqueFhm\\\\src\\\\components\\\\Q5.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport { ADD_COUNTRY, EDIT_POPULATION } from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Q5 = props => {\n  _s();\n\n  const [paysExists, setPaysExists] = useState(false); // Si le pays existe déjà\n\n  const [paysName, setPaysName] = useState(\"\"); // Nom du pays depuis le formulaire\n  // Fonction qui soumet le formulaire et ajoute un pays ou modifie sa population s'il existe déjà\n\n  function handleSubmit(e) {\n    e.preventDefault(); // Les données du formulaire\n\n    const formDatas = new FormData(e.target); // Si le pays existe déjà\n\n    if (paysExists) {\n      const population = Number(formDatas.get(\"population\")); // On convertit la population en nombre\n      // Données à envoyer au store sous forme d'objet\n\n      const data = {\n        name: paysName,\n        population\n      }; // On modifie la population du pays\n\n      props.editPopulation(data);\n      e.target.reset(); // Message de succès\n\n      Swal.fire({\n        title: \"Population modifiée\",\n        icon: \"success\",\n        timer: 2000\n      }); // Si le pays n'existe pas\n    } else {\n      const surface = Number(formDatas.get(\"surface\")); // On convertit la surface en nombre\n\n      const population = Number(formDatas.get(\"population\")); // On convertit la population en nombre\n\n      const indepYear = Number(formDatas.get(\"indepYear\")); // On convertit l'année d'indépendance en nombre\n\n      const image = formDatas.get(\"image\"); // On récupère l'image\n      // Données à envoyer au store sous forme d'objet\n\n      const data = {\n        name: paysName,\n        surface,\n        population,\n        indepYear,\n        image\n      }; // On ajoute le pays\n\n      props.addCountry(data);\n      e.target.reset(); // Message de succès\n\n      Swal.fire({\n        title: \"Pays ajouté\",\n        icon: \"success\",\n        timer: 2000\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center flex-column\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Ajout & modification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form-group\",\n          onSubmit: e => handleSubmit(e),\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Nom du pays:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            required: true,\n            className: \"form-control\",\n            onChange: e => {\n              setPaysName(e.target.value);\n              setPaysExists(props.pays.find(p => p.name === e.target.value));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), paysExists ?\n          /*#__PURE__*/\n          // Si le pays existe déjà, on affiche les champs pour modifier sa population\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"population\",\n              children: \"Population:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"population\",\n              required: true,\n              placeholder: \"Population actuelle: \" + props.pays.find(p => p.name === paysName).population,\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mt-2\",\n              children: \"Modifier\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) :\n          /*#__PURE__*/\n          // Sinon, on affiche les champs pour ajouter un pays\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"surface\",\n              children: \"Surface:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"surface\",\n              required: true,\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"population\",\n              children: \"Population:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              required: true,\n              name: \"population\",\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"indepYear\",\n              children: \"Ann\\xE9e d'ind\\xE9pendance:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              required: true,\n              name: \"indepYear\",\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"image\",\n              children: \"Image:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              required: true,\n              name: \"image\",\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mt-2\",\n              children: \"Ajouter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}; // Recuperation des données du store, mais on ne récupère que les pays\n\n\n_s(Q5, \"RzocVMuRIpZAL0z9GG8C3fj1zDM=\");\n\n_c = Q5;\n\nconst mapStateToProps = state => {\n  return {\n    pays: state.pays\n  };\n}; // Les actions à dispatcher pour ajouter ou modifier un pays, ADD_COUNTRY et EDIT_POPULATION sont des actions créées dans le dossier actions\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addCountry: data => dispatch(ADD_COUNTRY(data)),\n    editPopulation: data => dispatch(EDIT_POPULATION(data))\n  };\n}; // Connexion du composant à redux\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Q5);\n\nvar _c;\n\n$RefreshReg$(_c, \"Q5\");","map":{"version":3,"names":["React","useState","connect","Swal","ADD_COUNTRY","EDIT_POPULATION","Q5","props","paysExists","setPaysExists","paysName","setPaysName","handleSubmit","e","preventDefault","formDatas","FormData","target","population","Number","get","data","name","editPopulation","reset","fire","title","icon","timer","surface","indepYear","image","addCountry","value","pays","find","p","mapStateToProps","state","mapDispatchToProps","dispatch"],"sources":["D:/etuds ofppt/2_anne/Devlop_frontend/fahmReact/pratiqueFhm/src/components/Q5.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\n\nimport { ADD_COUNTRY, EDIT_POPULATION } from \"../actions\";\n\nconst Q5 = (props) => {\n    const [paysExists, setPaysExists] = useState(false); // Si le pays existe déjà\n    const [paysName, setPaysName] = useState(\"\"); // Nom du pays depuis le formulaire\n\n    // Fonction qui soumet le formulaire et ajoute un pays ou modifie sa population s'il existe déjà\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        // Les données du formulaire\n        const formDatas = new FormData(e.target);\n\n        // Si le pays existe déjà\n        if (paysExists) {\n            const population = Number(formDatas.get(\"population\")); // On convertit la population en nombre\n\n            // Données à envoyer au store sous forme d'objet\n            const data = {\n                name: paysName,\n                population,\n            };\n\n            // On modifie la population du pays\n            props.editPopulation(data);\n            e.target.reset();\n\n            // Message de succès\n            Swal.fire({\n                title: \"Population modifiée\",\n                icon: \"success\",\n                timer: 2000,\n            });\n\n            // Si le pays n'existe pas\n        } else {\n            const surface = Number(formDatas.get(\"surface\")); // On convertit la surface en nombre\n            const population = Number(formDatas.get(\"population\")); // On convertit la population en nombre\n            const indepYear = Number(formDatas.get(\"indepYear\")); // On convertit l'année d'indépendance en nombre\n            const image = formDatas.get(\"image\"); // On récupère l'image\n\n            // Données à envoyer au store sous forme d'objet\n            const data = {\n                name: paysName,\n                surface,\n                population,\n                indepYear,\n                image,\n            };\n\n            // On ajoute le pays\n            props.addCountry(data);\n            e.target.reset();\n\n            // Message de succès\n            Swal.fire({\n                title: \"Pays ajouté\",\n                icon: \"success\",\n                timer: 2000,\n            });\n        }\n    }\n\n    return (\n        <div className=\"d-flex justify-content-center flex-column\">\n            <h1 className=\"text-center\">Ajout & modification</h1>\n            <div className=\"row d-flex justify-content-center\">\n                <div className=\"col-6\">\n                    <form\n                        className=\"form-group\"\n                        onSubmit={(e) => handleSubmit(e)}>\n                        <label htmlFor=\"name\">Nom du pays:</label>\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            required\n                            className=\"form-control\"\n                            onChange={(e) => {\n                                setPaysName(e.target.value);\n                                setPaysExists(\n                                    props.pays.find(\n                                        (p) => p.name === e.target.value\n                                    )\n                                );\n                            }}\n                        />\n\n                        {paysExists ? (\n                            // Si le pays existe déjà, on affiche les champs pour modifier sa population\n                            <>\n                                <label htmlFor=\"population\">Population:</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"population\"\n                                    required\n                                    placeholder={\n                                        \"Population actuelle: \" +\n                                        props.pays.find(\n                                            (p) => p.name === paysName\n                                        ).population\n                                    }\n                                    className=\"form-control\"\n                                />\n                                <button className=\"btn btn-primary mt-2\">\n                                    Modifier\n                                </button>\n                            </>\n                        ) : (\n                            // Sinon, on affiche les champs pour ajouter un pays\n                            <>\n                                <label htmlFor=\"surface\">Surface:</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"surface\"\n                                    required\n                                    className=\"form-control\"\n                                />\n\n                                <label htmlFor=\"population\">Population:</label>\n                                <input\n                                    type=\"number\"\n                                    required\n                                    name=\"population\"\n                                    className=\"form-control\"\n                                />\n\n                                <label htmlFor=\"indepYear\">\n                                    Année d'indépendance:\n                                </label>\n                                <input\n                                    type=\"number\"\n                                    required\n                                    name=\"indepYear\"\n                                    className=\"form-control\"\n                                />\n\n                                <label htmlFor=\"image\">Image:</label>\n                                <input\n                                    type=\"text\"\n                                    required\n                                    name=\"image\"\n                                    className=\"form-control\"\n                                />\n\n                                <button className=\"btn btn-primary mt-2\">\n                                    Ajouter\n                                </button>\n                            </>\n                        )}\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// Recuperation des données du store, mais on ne récupère que les pays\nconst mapStateToProps = (state) => {\n    return {\n        pays: state.pays,\n    };\n};\n\n// Les actions à dispatcher pour ajouter ou modifier un pays, ADD_COUNTRY et EDIT_POPULATION sont des actions créées dans le dossier actions\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addCountry: (data) => dispatch(ADD_COUNTRY(data)),\n        editPopulation: (data) => dispatch(EDIT_POPULATION(data)),\n    };\n};\n\n// Connexion du composant à redux\nexport default connect(mapStateToProps, mapDispatchToProps)(Q5);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}