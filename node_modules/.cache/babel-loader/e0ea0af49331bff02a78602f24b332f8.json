{"ast":null,"code":"var _jsxFileName = \"D:\\\\etuds ofppt\\\\2_anne\\\\Devlop_frontend\\\\fahmReact\\\\pratiqueFhm\\\\src\\\\components\\\\Q3.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Q3 = props => {\n  _s();\n\n  // Récupérer tout les pays depuis le store\n  const {\n    allPays\n  } = props; // Récupérer l'année d'indépendance depuis l'url\n\n  const {\n    indepYear\n  } = useParams(); // Si l'année d'indépendance est définie, on filtre les pays par elle, sinon on affiche tout les pays\n\n  const pays = indepYear ? allPays.filter(p => p.indepYear === Number(indepYear)) : allPays;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row d-flex justify-content-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [indepYear ? `Pays indépendant en ${indepYear}` // Si l'année est définie\n      : \"Tous les pays\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), pays.length > 0 ? // Si il y a des pays on les afficher\n    pays.map((p, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card m-3 col-md-2 col-sm-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          style: {\n            backgroundColor: \"black\",\n            color: \"white\",\n            padding: \"10px\",\n            borderRadius: \"5px \"\n          },\n          children: p.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: p.image,\n          className: \"card-img-top my-3\",\n          alt: p.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Superficie:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 19\n            }, this), \" \", p.surface.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \"), \" \", \"km\\xB2 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Population:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }, this), \" \", p.population > 1000000000 ? (p.population / 1000000000).toFixed(2) + \" milliards\" : p.population > 1000000 ? (p.population / 1000000).toFixed(2) + \" millions\" : p.population > 1000 ? (p.population / 1000).toFixed(2) + \" milliers\" : p.population, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this);\n    }) :\n    /*#__PURE__*/\n    // Sinon on affiche un message d'erreur\n    _jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Aucun pays trouv\\xE9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}; // Récupérer les pays du store, pour les afficher\n\n\n_s(Q3, \"8peDoP+SeuW8U2gqVbfPoYhh2NI=\", false, function () {\n  return [useParams];\n});\n\n_c = Q3;\n\nconst mapStateToProps = state => {\n  return {\n    allPays: state.pays\n  };\n}; // Connecter le composant au store\n\n\nexport default connect(mapStateToProps, null)(Q3);\n\nvar _c;\n\n$RefreshReg$(_c, \"Q3\");","map":{"version":3,"names":["connect","useParams","Q3","props","allPays","indepYear","pays","filter","p","Number","length","map","i","backgroundColor","color","padding","borderRadius","name","image","surface","toString","replace","population","toFixed","mapStateToProps","state"],"sources":["D:/etuds ofppt/2_anne/Devlop_frontend/fahmReact/pratiqueFhm/src/components/Q3.js"],"sourcesContent":["import { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nconst Q3 = (props) => {\n  // Récupérer tout les pays depuis le store\n  const { allPays } = props;\n  // Récupérer l'année d'indépendance depuis l'url\n  const { indepYear } = useParams();\n  // Si l'année d'indépendance est définie, on filtre les pays par elle, sinon on affiche tout les pays\n  const pays = indepYear\n    ? allPays.filter((p) => p.indepYear === Number(indepYear))\n    : allPays;\n  return (\n    <div className=\"row d-flex justify-content-center\">\n      <h3>\n        {indepYear\n          ? `Pays indépendant en ${indepYear}` // Si l'année est définie\n          : \"Tous les pays\"}{\" \"}\n      </h3>\n\n      {pays.length > 0 ? (\n        // Si il y a des pays on les afficher\n        pays.map((p, i) => {\n          return (\n            <div className=\"card m-3 col-md-2 col-sm-6\" key={i}>\n              <h5\n                className=\"card-title\"\n                style={{\n                  backgroundColor: \"black\",\n                  color: \"white\",\n                  padding:\"10px\",\n                  borderRadius: \"5px \"\n                }}\n              >\n                {p.name}\n              </h5>\n              <img src={p.image} className=\"card-img-top my-3\" alt={p.name} />\n              <div className=\"card-body\">\n                <p className=\"card-text\">\n                  <strong>Superficie:</strong>{\" \"}\n                  {p.surface.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")}{\" \"}\n                  km² <br />\n                  <strong>Population:</strong>{\" \"}\n                  {p.population > 1_000_000_000\n                    ? (p.population / 1_000_000_000).toFixed(2) + \" milliards\"\n                    : p.population > 1_000_000\n                    ? (p.population / 1_000_000).toFixed(2) + \" millions\"\n                    : p.population > 1_000\n                    ? (p.population / 1_000).toFixed(2) + \" milliers\"\n                    : p.population}{\" \"}\n                  <br />\n                </p>\n              </div>\n            </div>\n          );\n        })\n      ) : (\n        // Sinon on affiche un message d'erreur\n        <h1 className=\"text-center\">Aucun pays trouvé</h1>\n      )}\n    </div>\n  );\n};\n\n// Récupérer les pays du store, pour les afficher\nconst mapStateToProps = (state) => {\n  return {\n    allPays: state.pays,\n  };\n};\n\n// Connecter le composant au store\nexport default connect(mapStateToProps, null)(Q3);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}