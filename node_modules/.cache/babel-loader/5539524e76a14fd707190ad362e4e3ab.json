{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport af from './images/afrique.png';\nimport am from './images/americain.png';\nimport eu from './images/europ.png';\nconst initialState = {\n  continents: [{\n    code: \"AF\",\n    name: \"Africa\",\n    surfaceArea: 30370000,\n    population: 1216130000,\n    avatar: af,\n    Pays: [{\n      name: \"Maroc\",\n      population: 43850000,\n      capital: \"Rabat\",\n      indepYear: 1962,\n      image: \"https://www.example.com/algeria.jpg\"\n    }]\n  }, {\n    code: \"AM\",\n    name: \"Américain\",\n    surfaceArea: 30370000,\n    population: 121610000,\n    avatar: am,\n    Pays: [{\n      name: \"Canada\",\n      population: 43850000,\n      capital: \"Canada\",\n      indepYear: 1963,\n      image: \"https://www.example.com/algeria.jpg\"\n    }, {\n      name: \"test\",\n      population: 43850000,\n      capital: \"Canada\",\n      indepYear: 1963,\n      image: \"https://www.example.com/algeria.jpg\"\n    }]\n  }, {\n    code: \"EU\",\n    name: \"Europe \",\n    surfaceArea: 30370000,\n    population: 121613000,\n    avatar: eu,\n    Pays: [{\n      name: \"France\",\n      population: 43850000,\n      capital: \"Paris\",\n      indepYear: 1964,\n      image: \"https://www.example.com/algeria.jpg\"\n    }]\n  }],\n  filterContinents: []\n};\nconst ContinentSlice = createSlice({\n  name: \"continent\",\n  initialState,\n  reducers: {\n    add: (state, action) => {\n      state.continents.map(con => {\n        if (con.name === action.payload.nomC) {\n          con.Pays.push(action.payload);\n        }\n      });\n    },\n    edit: (state, action) => {\n      if (action.payload.population && action.payload.nomP && action.payload.nomC) {\n        state.continents.map(continent => {\n          if (continent.name == action.payload.nomC) {\n            continent.Pays.map(con => {\n              if (con.name == action.payload.nomP) {\n                con.population = action.payload.population;\n              }\n            });\n          }\n        });\n      }\n    },\n    filter: (state, action) => {\n      if (action.payload.population) {\n        state.filterContinents = [];\n        state.continents.map(continent => {\n          if (continent.population === action.payload.population) {\n            continent.Pays.map(pays => state.filterContinents.push(pays));\n          }\n        });\n      }\n\n      if (action.payload.continent) {\n        state.filterContinents = [];\n        state.continents.map(continent => {\n          if (continent.name === action.payload.continent) {\n            continent.Pays.map(pays => state.filterContinents.push(pays));\n          }\n        });\n      }\n    }\n  }\n});\nexport const {\n  add,\n  edit,\n  filter\n} = ContinentSlice.actions;\nexport default ContinentSlice.reducer;","map":{"version":3,"names":["createSlice","af","am","eu","initialState","continents","code","name","surfaceArea","population","avatar","Pays","capital","indepYear","image","filterContinents","ContinentSlice","reducers","add","state","action","map","con","payload","nomC","push","edit","nomP","continent","filter","pays","actions","reducer"],"sources":["D:/etuds ofppt/2_anne/Devlop_frontend/fahmReact/pratiqueFhm/src/ContinentSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport af from './images/afrique.png' \r\nimport am from './images/americain.png' \r\nimport eu from './images/europ.png' \r\nconst initialState = {\r\n  continents : [{\r\n    code: \"AF\",\r\n    name: \"Africa\",\r\n    surfaceArea: 30370000,\r\n    population: 1216130000,\r\n    avatar: af,\r\n    Pays: [\r\n      {\r\n        name: \"Maroc\",\r\n        population: 43850000,\r\n        capital: \"Rabat\",\r\n        indepYear: 1962,\r\n        image: \"https://www.example.com/algeria.jpg\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    code: \"AM\",\r\n    name: \"Américain\",\r\n    surfaceArea: 30370000,\r\n    population: 121610000,\r\n    avatar: am,\r\n    Pays: [\r\n      {\r\n        name: \"Canada\",\r\n        population: 43850000,\r\n        capital: \"Canada\",\r\n        indepYear: 1963,\r\n        image: \"https://www.example.com/algeria.jpg\",\r\n      },\r\n      {\r\n        name: \"test\",\r\n        population: 43850000,\r\n        capital: \"Canada\",\r\n        indepYear: 1963,\r\n        image: \"https://www.example.com/algeria.jpg\",\r\n      }\r\n    ],\r\n  },\r\n  {\r\n    code: \"EU\",\r\n    name: \"Europe \",\r\n    surfaceArea: 30370000,\r\n    population: 121613000,\r\n    avatar: eu,\r\n    Pays: [\r\n      {\r\n        name: \"France\",\r\n        population: 43850000,\r\n        capital: \"Paris\",\r\n        indepYear: 1964,\r\n        image: \"https://www.example.com/algeria.jpg\",\r\n      },\r\n    ],\r\n  }],\r\n  filterContinents : [],\r\n}\r\n\r\nconst ContinentSlice = createSlice({\r\n  name : \"continent\",\r\n  initialState,\r\n  reducers :{\r\n    add : (state, action) => {\r\n      state.continents.map(con => {\r\n        if(con.name === action.payload.nomC){\r\n            con.Pays.push(action.payload)\r\n          }\r\n    })\r\n  },\r\n  edit : (state, action) => {\r\n    if(action.payload.population && action.payload.nomP && action.payload.nomC){\r\n      state.continents.map(continent => {\r\n        if(continent.name == action.payload.nomC){\r\n          continent.Pays.map(con => {\r\n            if(con.name == action.payload.nomP){\r\n              con.population = action.payload.population;\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  },\r\n  filter : (state, action) =>{\r\n    if(action.payload.population){\r\n      state.filterContinents =[]\r\n      state.continents.map(continent=>\r\n        {if(continent.population===action.payload.population){\r\n          continent.Pays.map(pays => state.filterContinents.push(pays))\r\n        }}\r\n        )\r\n    }\r\n    if(action.payload.continent){\r\n      state.filterContinents =[]\r\n      state.continents.map(continent=>\r\n        {if(continent.name===action.payload.continent){\r\n          continent.Pays.map(pays => state.filterContinents.push(pays))\r\n        }}\r\n        )\r\n    }\r\n  }\r\n  }\r\n})\r\nexport const {add, edit, filter} = ContinentSlice.actions\r\nexport default ContinentSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}